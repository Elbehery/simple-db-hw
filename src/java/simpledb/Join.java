package simpledb;

import java.util.*;

// TODO :: Hash Join && MergeSort Join

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate joinPredicate;
    private final TupleDesc tupleDesc;
    private OpIterator child1;
    private OpIterator child2;
    private TupleIterator tupleIterator;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        return this.joinPredicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return this.child1.getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return this.tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        this.tupleIterator = computeAndCacheJoinResult();
        this.tupleIterator.open();
        super.open();
    }

    public void close() {
        super.close();
        this.child1.close();
        this.child2.close();
        this.tupleIterator = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.tupleIterator.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (this.tupleIterator.hasNext())
            return this.tupleIterator.next();

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if (children.length < 2)
            throw new IllegalArgumentException("Join Operator requires at least TWO children");

        child1 = children[0];
        child2 = children[1];
    }

    private TupleIterator computeAndCacheJoinResult() throws DbException, TransactionAbortedException {
        List<Tuple> result = new LinkedList<>();

        while (child1.hasNext()) {
            Tuple outer = child1.next();
            child2.rewind();
            while (child2.hasNext()) {
                Tuple inner = child2.next();
                if (joinPredicate.filter(outer, inner)) {
                    result.add(mergeTuples(outer, inner));
                }
            }
        }
        return new TupleIterator(getTupleDesc(), result);
    }

    private Tuple mergeTuples(Tuple t1, Tuple t2) {
        Tuple tuple = new Tuple(this.tupleDesc);

        int i = 0;
        while (i < t1.getTupleDesc().numFields()) {
            tuple.setField(i, t1.getField(i));
            i++;
        }
        while (i < this.tupleDesc.numFields()) {
            tuple.setField(i, t2.getField(i - t1.getTupleDesc().numFields()));
            i++;
        }
        return tuple;
    }
}
